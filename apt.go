package main

import (
	"bytes"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/go-faster/errors"
)

func APTUpdate() error {
	fmt.Println("> apt-get update")
	cmd := exec.Command("apt-get", "update")
	cmd.Env = appendDebianFrontend(os.Environ())
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	if err := cmd.Run(); err != nil {
		return errors.Wrap(err, "apt update")
	}
	return nil
}

func appendDebianFrontend(vars []string) []string {
	return appendEnv(vars, "DEBIAN_FRONTEND", "noninteractive")
}

func APTUpgrade() error {
	fmt.Println("> apt-get upgrade")
	cmd := exec.Command("apt-get", "upgrade", "-y")
	cmd.Env = appendDebianFrontend(os.Environ())
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	if err := cmd.Run(); err != nil {
		return errors.Wrap(err, "apt upgrade")
	}
	return nil
}

func APTInstall(packages ...string) error {
	fmt.Println("> apt-get install", packages)
	cmd := exec.Command("apt-get", append([]string{"install", "-y"}, packages...)...)
	cmd.Env = appendDebianFrontend(os.Environ())
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	if err := cmd.Run(); err != nil {
		return errors.Wrap(err, "apt install")
	}
	return nil
}

func APTHold(packages ...string) error {
	fmt.Println("> apt-mark hold", packages)
	cmd := exec.Command("apt-mark", append([]string{"hold"}, packages...)...)
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	if err := cmd.Run(); err != nil {
		return errors.Wrap(err, "apt-mark hold")
	}
	return nil
}

func APTKey(keyName, keyURL string) error {
	fmt.Printf("> Adding GPG key %s\n", keyName)
	dirName := "/etc/apt/keyrings"
	if _, err := os.Stat(dirName); os.IsNotExist(err) {
		fmt.Println("> Creating", dirName)
		if err := os.Mkdir(dirName, 0755); err != nil {
			return errors.Wrap(err, "mkdir")
		}
	}
	fileName := filepath.Join(dirName, keyName+".gpg")
	if _, err := os.Stat(fileName); err == nil {
		fmt.Printf("> GPG key %s already exists\n", fileName)
		return nil
	}
	fmt.Println("Downloading key", keyURL)
	res, err := http.Get(keyURL)
	if err != nil {
		return errors.Wrap(err, "get key")
	}
	defer func() {
		_ = res.Body.Close()
	}()
	if res.StatusCode != http.StatusOK {
		return errors.Errorf("bad status: %s", res.Status)
	}
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return errors.Wrap(err, "read key")
	}
	fmt.Printf("> Writing %s\n", fileName)
	cmd := exec.Command("gpg", "--dearmour", "-o", fileName)
	cmd.Stdin = bytes.NewReader(data)
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	if err := cmd.Run(); err != nil {
		return errors.Wrap(err, "gpg")
	}
	return nil
}

type APTAddRepoOptions struct {
	Name       string
	Arch       []string
	SignedBy   string
	URL        string
	Components []string
}

func APTAddRepo(opt APTAddRepoOptions) error {
	// sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
	// deb [arch=amd64,arm64,armhf] https://packages.microsoft.com/repos/code stable main
	// deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /
	// deb [arch=amd64 signed-by=/usr/share/keyrings/some-repo.gpg] http://some.repo/apt dev main
	var s strings.Builder
	s.WriteString("# Generated by ki\n")
	s.WriteString("deb ")
	var components []string
	if len(opt.Arch) > 0 {
		components = append(components, "arch="+strings.Join(opt.Arch, ","))
	}
	if opt.SignedBy != "" {
		components = append(components, "signed-by="+opt.SignedBy)
	}
	if len(components) > 0 {
		s.WriteString("[")
		s.WriteString(strings.Join(components, " "))
		s.WriteString("] ")
	}
	s.WriteString(opt.URL)
	if len(opt.Components) > 0 {
		s.WriteString(" ")
		s.WriteString(strings.Join(opt.Components, " "))
	}
	s.WriteString("\n")

	// Write to file.
	fileName := filepath.Join("/etc/apt/sources.list.d/", opt.Name+".list")
	fmt.Printf("> Writing %s\n", fileName)
	if err := os.WriteFile(fileName, []byte(s.String()), 0644); err != nil {
		return errors.Wrap(err, "write")
	}

	return nil
}
